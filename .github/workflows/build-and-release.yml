name: üöÄ Build e Release ID Management System

on:
  push:
    tags:
      - 'v*.*.*'  # Dispara quando criar tag como v1.0.0
  
  # Permite execu√ß√£o manual
  workflow_dispatch:
    inputs:
      version:
        description: 'Vers√£o do release (ex: v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write  # necess√°rio para criar tag/release

jobs:
  build-windows:
    name: üèóÔ∏è Build Windows
    runs-on: windows-latest
    
    steps:
    - name: üìÅ Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: üè∑Ô∏è Definir TAG do release
      shell: pwsh
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          echo "RELEASE_TAG=${{ github.event.inputs.version }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        }
        else {
          echo "RELEASE_TAG=${{ github.ref_name }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        }

    - name: üè∑Ô∏è Criar tag (apenas em execu√ß√£o manual)
      if: ${{ github.event_name == 'workflow_dispatch' }}
      shell: pwsh
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag "$env:RELEASE_TAG"
        git push origin "$env:RELEASE_TAG"
    
    - name: üü¢ Setup Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: üì¶ Instalar depend√™ncias
      run: |
        cd frontend
        npm ci
    
    - name: üèóÔ∏è Build React App
      run: |
        cd frontend
        npm run build

    - name: üöÄ Publicar artefatos (auto-update via electron-builder)
      shell: pwsh
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd frontend
        # Extrair vers√£o sem o prefixo 'v' da tag
        $version = $env:RELEASE_TAG -replace '^v',''
        # Extrair owner e repo do contexto do GitHub
        $full = "${{ github.repository }}"  # formato: owner/repo
        $parts = $full -split '/'
        $owner = $parts[0]
        $repo = $parts[1]
        # Dispon√≠vel j√° neste step
        $env:ELECTRON_PUBLISH_OWNER = $owner
        $env:ELECTRON_PUBLISH_REPO  = $repo
        # E persiste para pr√≥ximos steps, se necess√°rio
        echo "ELECTRON_PUBLISH_OWNER=$owner" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "ELECTRON_PUBLISH_REPO=$repo"   | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
        # Garantir que package.json tem "repository" (electron-builder exige)
        $pkgPath = "package.json"
        $pkgText = Get-Content $pkgPath -Raw
        $pkgObj = $pkgText | ConvertFrom-Json
        $repoObj = [pscustomobject]@{ type = 'git'; url = "https://github.com/$full.git" }
        if ($pkgObj.PSObject.Properties.Match('repository').Count -eq 0) {
          $pkgObj | Add-Member -MemberType NoteProperty -Name repository -Value $repoObj -Force
        } else {
          $pkgObj.repository = $repoObj
        }
        $pkgObj | ConvertTo-Json -Depth 100 | Set-Content -Path $pkgPath -Encoding utf8

        echo "Empacotando e publicando vers√£o $version"
        npm run electron:publish -- --config.extraMetadata.version=$version
    
    - name: ‚ö° Build Electron App
      run: |
        cd frontend
        npm run electron:pack
    
    - name:  Criar ZIP do cliente
      run: |
        cd frontend/dist-electron
        Compress-Archive -Path "ID Management System-win32-x64" -DestinationPath "ID-Management-Cliente-Windows.zip" -Force
    
    - name: üì¶ Upload artifact (backup)
      uses: actions/upload-artifact@v4
      with:
        name: ID-Management-Cliente-Windows
        path: frontend/dist-electron/ID-Management-Cliente-Windows.zip
    
    - name: üè∑Ô∏è Criar Release no GitHub
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: "ID Management System ${{ env.RELEASE_TAG }}"
        body: |
          ## üéâ ID Management System ${{ github.ref_name }}
          
          ### üì• Downloads
          - **Instalador Windows (com auto-update)**: ser√° anexado como `ID-Management-Setup-<vers√£o>.exe` pelo electron-builder
          - **ZIP do cliente (backup)**: ID-Management-Cliente-Windows.zip
          
          ### üöÄ Novidades desta vers√£o
          - ‚úÖ Interface desktop nativa com Electron
          - ‚úÖ 3 tamanhos de janela predefinidos
          - ‚úÖ Controles personalizados (PIN, minimizar, fechar)
          - ‚úÖ Sistema de upload drag & drop
          - ‚úÖ Detec√ß√£o autom√°tica de tipos de arquivo
          - ‚úÖ Estrutura de pastas espelho no servidor
          - ‚úÖ Banco PostgreSQL centralizado
          
          ### üíª Requisitos
          - **Cliente**: Windows 10/11, Rede local
          - **Servidor**: Docker Desktop, Python 3.8+
          
          ### üõ†Ô∏è Instala√ß√£o R√°pida
          
          #### Para Clientes:
          1. Baixar: ID-Management-Cliente-Windows.zip  
          2. Extrair em: C:\ID-Management\
          3. Executar: ID Management System.exe
          4. App: configurar `%USERPROFILE%\\.id-management-config.json` com `{ "host": "SEU_IP_DO_SERVIDOR", "port": 8000, "protocol": "http" }`
          
          ### üåê Configura√ß√£o de Rede
          - **IP Servidor**: SEU_IP (ex.: 192.168.1.54)
          - **Porta API**: 8000
          - **Porta PostgreSQL**: 5432
        files: |
          frontend/dist-electron/ID-Management-Cliente-Windows.zip
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
